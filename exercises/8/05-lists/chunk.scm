(require rackunit rackunit/text-ui)

(define head car)
(define tail cdr)

; За да можем да разбием списък на много равни части,
; нека първо разбием списък само на 2 части спрямо позиция n.

; За реализацията се базираме на идеята, която ни помогна
; да реализираме reverse итеративно. Гледаме на списъка l като на стек,
; защото все пак това е едносвързан списък. За да обърнем реда на елементите
; в стек, просто итеративно махаме елемент от дадения списък (old) и го слагаме
; като глава на нов списък (new), докато не изчерпаме дадения списък.
; Нека наречем операцията на махане и слагане на елемент в нов списък - трансфер.
;
; За реализацията на split просто ще прекратим този процес на n-тата итерация
; и така ще разполагаме с два списъка.
; Да не забравяме че този, в който добавяхме елементи е в обратен ред
; и затова го обръщаме.
(define (split l n)
  (define (transfer old new position)
    (if (= position n)
        (list (reverse new) old)
        (transfer (tail old)
                  (cons (head old) new)
                  (+ position 1))))

  (transfer l '() 0))


; Сега разбиването на списък на няколко части се постига чрез
; няколко-кратното разделяне на списъка на 2 части.
;
; Например:
; За да разбием списъка '(1 2 3 4 5 6 7) на част по 2 елемента,
; трябва да построим нов списък с:
; - глава '(1 2), тоест лявата част от разделянето на целия списък на 2
; - опашка (chunk '(3 4 5 6 7) 2), тоест разбиването на остатъка
;
; Или по-общо казано (chunk l n) = (cons left (chunk right n)),
; където left и right са левия и десния списък от разделянето (split l n).
;
; На всяка стъпка даденият списък намалява. Кога спираме?
; Когато повече не можем да разделяме списъка, именно когато стане по-къс от n.
;
; За реализацията използвахме let*, защото ни позволява:
; 1) да извикаме (split l n) само веднъж, иначе трябваше 2 пъти
; 2) да използваме стойности от предходни клаузи в let, пр. left използва splitted
(define (chunk l n)
  (cond ((null? l) '())
        ((< (length l) n) (list l))
        (else (let* ((splitted (split l n))
                     (left (car splitted))
                     (right (cadr splitted)))
                    (cons left (chunk right n))))))

(define chunk-tests
  (test-suite
    "Tests for chunk"

    (check-equal? (chunk '() 42) '())
    (check-equal? (chunk '(1 2) 3) '((1 2)))
    (check-equal? (chunk '(1 2 3 4 5 6) 2) '((1 2) (3 4) (5 6)))
    (check-equal? (chunk '(1 2 3 4 5 6) 3) '((1 2 3) (4 5 6)))
    (check-equal? (chunk '(1 2 3 4 5 6 7 8) 3) '((1 2 3) (4 5 6) (7 8)))))

(run-tests chunk-tests)
