#lang racket
(require rackunit)
(require "describe.rkt")

(display "=== зад 1 ===\n")

(describe done?
  (check-true (done? 20))
  (check-false (done? 28))
  (check-equal? (filter done? (range 0 1001)) '(20 104 464 650)))

(describe sum-almost-done
  (check-eq? (sum-almost-done 4 24) 153)
  (check-eq? (sum-almost-done 5 24) 153)
  (check-eq? (sum-almost-done 6 24) 140)
  (check-eq? (sum-almost-done 7 24) 140)
  (check-eq? (sum-almost-done 5 23) 153)
  (check-eq? (sum-almost-done 5 24) 153)
  (check-eq? (sum-almost-done 6 25) 162)
  (check-eq? (sum-almost-done 7 26) 162)
  (check-eq? (sum-almost-done 25 64) 0)
  (check-eq? (sum-almost-done 20 104) 0)
  (check-eq? (sum-almost-done 20 105) 3507)
  (check-eq? (sum-almost-done 19 104) 1701)
  (check-eq? (sum-almost-done 19 105) 5270)
  (check-eq? (sum-almost-done 5 700) 227397)
  (check-eq? (sum-almost-done 5 5) 0)
  (check-eq? (sum-almost-done 20 20) 0)
  (check-eq? (sum-almost-done 24 4) 0))


(display "\n=== зад 2 ===\n")

(define (square x)
  (* x x))

(describe run-machine
  (check-equal? (run-machine '(1273912837))
                '(1273912837))
  (check-equal? (run-machine '(някакъв-символ))
                '(някакъв-символ))
  (check-equal? (run-machine (list 1 'x 4 'a 9 16 25 ))
                '(25 16 9 a 4 x 1))
  (check-equal? (run-machine (append '(1 2 a b c 3 4 d 5) (list square)))
                '(25 d 16 9 c b a 4 1))
  (check-equal? (run-machine (list 1 'x 4 'a 9 16 25 sqrt 6))
                '(6 5 4 3 a 2 x 1))
  (check-equal? (run-machine (list 1 'x 4 'a 9 16 25 sqrt 6 (cons + 2)))
                '(15 3 a 2 x 1))
  (check-equal? (run-machine (list 1 'x 4 'a 9 16 25 sqrt 6 (cons + 10)))
                '(18 a 2 x 1))
  (check-equal? (run-machine (list 1 'x 4 'a 9 16 25 sqrt 6 (cons + 2) (cons * 5)))
                '(45 a 2 x 1))
  (check-equal? (run-machine (list 'not-enough-numbers (cons + 2)))
                '(not-enough-numbers))
  (check-equal? (run-machine (list 2 'not-enough-numbers (cons + 2)))
                '(not-enough-numbers 2))
  (check-equal? (run-machine '((deep-list-gets-ignored)))
                '())
  (check-equal? (run-machine '("string gets ignored"))
                '())
  (check-equal? (run-machine '(1 2 a "ignored does not delete other numbers and symbols" 4 5 b 4))
                '(4 b 5 4 a 2 1))
  (check-equal? (run-machine (list 1 'ignores-wrong-type-cons 4 'a 9 16 25 (cons 2 +)))
                '(25 16 9 a 4 ignores-wrong-type-cons 1))
  (check-equal? (run-machine (list 1 'ignores-wrong-type-cons 4 'a 9 16 25 (cons 2 2)))
                '(25 16 9 a 4 ignores-wrong-type-cons 1))
  (check-equal? (run-machine '())
                '()))

(display "\n=== зад 3 ===\n")

(describe is-major?
  (check-true (is-major? '((1 3) (4 2 7) (2 5 4 3 9 12))))
  (check-true (is-major? '((1 3) (4 2 7))))
  (check-true (is-major? '((4 2 7) (2 5 4 3 9 12))))
  (check-true (is-major? '()))
  (check-true (is-major? '(())))
  (check-true (is-major? '((1))))
  (check-true (is-major? '((1 2 3 4 5 6 7 8 0 9 3288))))
  (check-false (is-major? '((1 3) (4 2 7) (2 5 3 3 9 12))))
  (check-false (is-major? '((4 2 7) (2 5 4 3 9 12) (1 3))))
  (check-true (is-major? '(() () () () () () () ())))
  (check-true (is-major? '((1) (1) (2) (3) (5) (6) (8) (10))))
  (check-false (is-major? '((1) (1) (2) (10) (5) (6) (8) (10))))
  (check-false (is-major? '((1) (1) (2) () (5) (6) (8) (10))))
  (check-false (is-major? '((1) () () ())))
  (check-true (is-major? '(() () (4) (2 7)))))
